import{a as b,e as T,u as E}from"./preload-helper-DTCqTb4O.js";import{C as A,A as N}from"./chrome-mock-BbAbqiJG.js";import{d as P,r as f,o as R,e as n,i as s,C as g,G as _,n as p,J as B,f as i}from"./auth-DA2mZ09H.js";import{_ as $}from"./_plugin-vue_export-helper-DlAUqK2U.js";const q={class:"wallet-import-loading-page"},L={class:"loading-container"},x={key:0,class:"wallet-info"},D={class:"wallet-card"},M={class:"wallet-placeholder"},O={class:"wallet-details"},G={class:"wallet-address"},V={key:1,class:"loading-section"},j={class:"progress-steps"},H={class:"step-circle"},J={key:0,class:"step-check"},U={key:1,class:"step-loading"},z={key:2},K={class:"step-circle"},Q={key:0,class:"step-check"},X={key:1,class:"step-loading"},Y={key:2},Z={class:"step-circle"},ee={key:0,class:"step-check"},se={key:1},ae={key:2,class:"error-section"},te={class:"error-message"},le=P({__name:"WalletImportLoading",setup(oe){const m=E(),v=T(),r=b(),c=f(null),t=f(1),d=f(""),u=f(!1),k=l=>l?`${l.slice(0,6)}...${l.slice(-4)}`:"",W=l=>A[l]?.name||l,h=async l=>{try{u.value=!0,d.value="",t.value=1,await new Promise(o=>setTimeout(o,1e3));const e=await fetch(`${N.API_BASE_URL}/wallets/${l}/refresh_balances/`,{method:"POST",headers:{"Content-Type":"application/json"}});if(!e.ok)throw new Error(`Failed to refresh balance: ${e.status}`);const a=await e.json();if(console.log("Refresh balances response:",a),a.status!=="success")throw new Error(a.error||"Failed to refresh balance");t.value=2,await new Promise(o=>setTimeout(o,1e3)),await r.loadWalletBalance(l),t.value=3,await new Promise(o=>setTimeout(o,500)),m.push("/")}catch(e){console.error("Failed to refresh wallet balance:",e),d.value=e instanceof Error?e.message:"Failed to refresh wallet data",t.value=1}finally{u.value=!1}},I=()=>{c.value?.id&&h(c.value.id)},C=()=>{m.push("/")},F=async l=>{try{u.value=!0,d.value="",t.value=1,console.log("Starting mnemonic import with data:",l);const e=await r.importMnemonic(l);console.log("Mnemonic import successful, received wallet:",e),await r.loadWallets();const a=r.wallets.find(o=>o.address===e.address&&o.chain===e.chain);if(!a)throw new Error("Failed to find imported wallet");r.setCurrentWallet(a),sessionStorage.removeItem("mnemonic_selected_chain"),c.value={id:a.id,address:a.address,chain:a.chain,name:a.name},t.value=2,await h(a.id)}catch(e){console.error("Failed to import mnemonic:",e),d.value=e instanceof Error?e.message:"Failed to import mnemonic",t.value=1}finally{u.value=!1}},S=async l=>{try{u.value=!0,d.value="",t.value=1,console.log("Starting wallet import with data:",l);const e=await r.importWallet(l);console.log("Import successful, received wallet:",e),await r.loadWallets();const a=r.wallets.find(o=>o.address===e.address&&o.chain===e.chain);if(!a)throw new Error("Failed to find imported wallet");r.setCurrentWallet(a),sessionStorage.removeItem("import_selected_chain"),c.value={id:a.id,address:a.address,chain:a.chain,name:a.name},t.value=2,await h(a.id)}catch(e){console.error("Failed to import wallet:",e),d.value=e instanceof Error?e.message:"Failed to import wallet",t.value=1}finally{u.value=!1}};return R(async()=>{const l=v.query.importData,e=v.query.importType;if(l){try{const w=JSON.parse(l);e==="mnemonic"?await F(w):await S(w)}catch(w){console.error("Failed to parse import data:",w),m.push("/")}return}const a=v.query.walletId,o=v.query.address,y=v.query.chain;if(!a||!o||!y){m.push("/");return}c.value={id:parseInt(a),address:o,chain:y,name:`${y} Wallet`},await h(parseInt(a))}),(l,e)=>(i(),n("div",q,[s("div",L,[e[8]||(e[8]=s("div",{class:"success-icon"},[s("i",{class:"ri-check-line"})],-1)),e[9]||(e[9]=s("h1",null,"Wallet Imported!",-1)),c.value?(i(),n("div",x,[s("div",D,[s("div",M,_(c.value.chain.charAt(0).toUpperCase()),1),s("div",O,[s("h3",null,_(W(c.value.chain))+" Wallet",1),s("p",G,_(k(c.value.address)),1)])])])):g("",!0),d.value?g("",!0):(i(),n("div",V,[e[3]||(e[3]=s("div",{class:"main-loading-spinner"},[s("div",{class:"spinner-ring"})],-1)),e[4]||(e[4]=s("h2",null,"Loading Wallet Data...",-1)),s("div",j,[s("div",{class:p(["step",{active:t.value>=1,completed:t.value>1}])},[s("div",H,[t.value>1?(i(),n("div",J,"✓")):t.value===1?(i(),n("div",U)):(i(),n("div",z,"1"))]),e[0]||(e[0]=s("span",null,"Sync",-1))],2),s("div",{class:p(["step-connector",{active:t.value>1}])},null,2),s("div",{class:p(["step",{active:t.value>=2,completed:t.value>2}])},[s("div",K,[t.value>2?(i(),n("div",Q,"✓")):t.value===2?(i(),n("div",X)):(i(),n("div",Y,"2"))]),e[1]||(e[1]=s("span",null,"Tokens",-1))],2),s("div",{class:p(["step-connector",{active:t.value>2}])},null,2),s("div",{class:p(["step",{active:t.value>=3}])},[s("div",Z,[t.value>=3?(i(),n("div",ee,"✓")):(i(),n("div",se,"3"))]),e[2]||(e[2]=s("span",null,"Done",-1))],2)])])),d.value?(i(),n("div",ae,[e[6]||(e[6]=s("div",{class:"error-icon"},[s("i",{class:"ri-error-warning-line"})],-1)),e[7]||(e[7]=s("h2",null,"Loading Failed",-1)),s("p",te,_(d.value),1),s("div",{class:"error-actions"},[s("button",{class:"retry-btn",onClick:I},e[5]||(e[5]=[s("i",{class:"ri-refresh-line"},null,-1),B(" Retry ")])),s("button",{class:"skip-btn",onClick:C}," Skip ")])])):g("",!0)])]))}}),de=$(le,[["__scopeId","data-v-4c430bed"]]);export{de as default};

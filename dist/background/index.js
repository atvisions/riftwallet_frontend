import{S as s,M as c,A as n}from"../assets/index-CpkLCnFh.js";import{d as f,b as h,g}from"../assets/chrome-mock-BOlt1wEj.js";console.log("Riftwallet Background Script loaded");chrome.runtime.onInstalled.addListener(async e=>{console.log("Extension installed:",e.reason),e.reason==="install"&&await _()});chrome.action.onClicked.addListener(async e=>{console.log("Background: Extension icon clicked, tab:",e);try{chrome.sidePanel&&e.windowId?(console.log("Background: Opening side panel for window:",e.windowId),await chrome.sidePanel.open({windowId:e.windowId}),console.log("Background: Side panel opened successfully")):(console.log("Background: Side Panel API not supported or no window ID, using popup fallback"),await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:e.windowId}))}catch(r){console.error("Background: Failed to open side panel:",r);try{console.log("Background: Attempting fallback - opening new tab..."),await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:e.windowId})}catch(t){console.error("Background: Fallback also failed:",t)}}});chrome.contextMenus.onClicked.addListener(async(e,r)=>{if(e.menuItemId==="open-popup")try{await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:r?.windowId})}catch(t){console.error("Failed to open popup:",t)}});chrome.runtime.onMessage.addListener((e,r,t)=>{if(console.log("Background: Received message:",e.type,"from sender:",r),e.type==="TOGGLE_SIDEPANEL")return I(r.tab?.windowId).then(()=>t({success:!0})).catch(o=>t({success:!1,error:o.message})),!0});async function I(e){if(console.log("Background: handleToggleSidePanel called with windowId:",e),!chrome.sidePanel)throw new Error("Side Panel API not available");try{let r=e;if(r||(console.log("Background: No windowId provided, getting current window..."),r=(await chrome.windows.getCurrent()).id,console.log("Background: Using current window ID:",r)),!r)throw new Error("Unable to determine target window");console.log("Background: Opening side panel for window:",r),await chrome.sidePanel.open({windowId:r}),console.log("Background: Side panel opened successfully")}catch(r){throw console.error("Background: Failed to toggle side panel:",r),r}}async function _(){try{const e=f();await chrome.storage.local.set({[s.DEVICE_ID]:e,[s.WALLETS]:[],[s.SETTINGS]:{language:"en",currency:"USD",theme:"light",notifications:!0,autoLock:!0,lockTimeout:3e5}}),chrome.contextMenus.create({id:"open-popup",title:"Open Wallet Popup",contexts:["action"]}),console.log("Extension initialized with device ID:",e)}catch(e){console.error("Failed to initialize extension:",e)}}chrome.runtime.onMessage.addListener((e,r,t)=>(console.log("Background received message:",e.type,e.data),m(e).then(o=>{t({success:!0,data:o})}).catch(o=>{console.error("Message handling error:",o),t({success:!1,error:o.message})}),!0));async function m(e){switch(e.type){case c.GET_WALLETS:return await u();case c.GET_CURRENT_WALLET:return await y();case c.SET_CURRENT_WALLET:return await S(e.data);case c.CREATE_WALLET:return await T(e.data);case c.IMPORT_WALLET:return await A(e.data);case c.DELETE_WALLET:return await L(e.data.walletId);case c.GET_BALANCE:return await P(e.data.walletId);case c.TRANSFER:return await k(e.data);case c.SWAP:return await R(e.data);case c.GET_SETTINGS:return await v();case c.UPDATE_SETTINGS:return await U(e.data);case c.GET_SUPPORTED_CHAINS:return await B();case c.REFRESH_TOKEN_PRICES:return await C(e.data.walletId);default:throw new Error(`Unknown message type: ${e.type}`)}}async function y(){return h(),(await g().get([s.CURRENT_WALLET]))[s.CURRENT_WALLET]||null}async function S(e){return h(),await g().set({[s.CURRENT_WALLET]:{walletId:e.walletId}}),console.log("Current wallet saved to storage:",e.walletId),{success:!0}}async function u(){h();const e=g(),t=(await e.get([s.DEVICE_ID,s.WALLETS]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");const o=n.API_BASE_URL.startsWith("http")?n.API_BASE_URL:`http://localhost:3000${n.API_BASE_URL}`,i=await(await fetch(`${o}/wallets/?device_id=${t}`)).json();if(i.state==="success")return await e.set({[s.WALLETS]:i.data||[]}),i.data||[];throw new Error(i.message||"Failed to get wallets")}async function T(e){const t=(await chrome.storage.local.get([s.DEVICE_ID]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");const o=n.API_BASE_URL.startsWith("http")?n.API_BASE_URL:`http://localhost:3000${n.API_BASE_URL}`,i=await(await fetch(`${o}/wallets/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({...e,device_id:t})})).json();if(i.state==="success")return await u(),i.data;throw new Error(i.message||"Failed to create wallet")}async function A(e){const t=(await chrome.storage.local.get([s.DEVICE_ID]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");let o="";if(e.private_key)o="import_private_key";else if(e.mnemonic)o="import_by_mnemonic";else if(e.address)o="import_watch_only";else throw new Error("Invalid import data");const p={...e,device_id:t},i=n.API_BASE_URL.startsWith("http")?n.API_BASE_URL:`http://localhost:3000${n.API_BASE_URL}`,E=`${i}/wallets/${o}/`;console.log("Import wallet request:",{endpoint:o,baseUrl:i,apiUrl:E,body:p});const l=await fetch(E,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(p)}),a=await l.json();if(console.log("Import wallet response:",{status:l.status,statusText:l.statusText,data:a}),l.ok&&a.state==="success")return await u(),a.data;if(console.error("Import wallet failed:",a),console.error("Response status:",l.status),console.error("Response ok:",l.ok),console.error("Data state:",a.state),console.error("Error message:",a.message),console.error("Non field errors:",a.non_field_errors),console.error("Full error data:",JSON.stringify(a,null,2)),l.status===400){let w="";a.message?w=a.message:a.non_field_errors&&Array.isArray(a.non_field_errors)&&a.non_field_errors.length>0?w=a.non_field_errors[0]:a.error?w=a.error:typeof a=="string"&&(w=a);const d=w.toLowerCase();throw console.log("Checking error message:",w),console.log("Lowercase error message:",d),d.includes("password")?new Error("Incorrect password. Please check your payment password."):d.includes("private key")||d.includes("privatekey")?new Error("Invalid private key. Please check your private key format."):d.includes("mnemonic")||d.includes("recovery phrase")?new Error("Invalid recovery phrase. Please check your 12-word phrase."):d.includes("invalid")||d.includes("wrong")||d.includes("incorrect")?new Error("Invalid input. Please check your private key and password."):new Error(w||"Invalid request. Please check your input.")}else throw l.status===401?new Error("Authentication failed. Please try again."):l.status===500?new Error("Server error. Please try again later."):new Error(a.message||a.non_field_errors?.[0]||"Failed to import wallet")}async function L(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e}/delete_wallet/`,{method:"POST",headers:{"Content-Type":"application/json"}})).json();if(t.state==="success")return await u(),t.data;throw new Error(t.message||"Failed to delete wallet")}async function P(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e}/get_all_balances/`)).json();if(t.state==="success")return t;throw new Error(t.message||"Failed to get balance")}async function k(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e.walletId}/transfer/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();if(t.state==="success")return t.data;throw new Error(t.message||"Transfer failed")}async function R(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e.walletId}/swap/execute/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();if(t.state==="success")return t.data;throw new Error(t.message||"Swap failed")}async function v(){return(await chrome.storage.local.get([s.SETTINGS]))[s.SETTINGS]||{}}async function U(e){return await chrome.storage.local.set({[s.SETTINGS]:e}),e}async function B(){const e=n.API_BASE_URL.startsWith("http")?n.API_BASE_URL:`http://localhost:3000${n.API_BASE_URL}`,t=await(await fetch(`${e}/wallets/get_supported_chains/`)).json();if(t.state==="success")return t.data||[];throw new Error(t.message||"Failed to get supported chains")}async function C(e){const r=n.API_BASE_URL.startsWith("http")?n.API_BASE_URL:`http://localhost:3000${n.API_BASE_URL}`,o=await(await fetch(`${r}/wallets/${e}/get_token_prices/`,{method:"GET",headers:{"Content-Type":"application/json"}})).json();if(o.status==="success")return o;throw new Error(o.message||"Failed to refresh token prices")}chrome.alarms.create("refreshData",{periodInMinutes:5});chrome.alarms.onAlarm.addListener(async e=>{if(e.name==="refreshData")try{await u(),console.log("Data refreshed")}catch(r){console.error("Failed to refresh data:",r)}});

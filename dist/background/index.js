import{d as f,S as s,M as r,a as h,b as g,A as u}from"../assets/chrome-mock-DxZfNgLw.js";console.log("Riftwallet Background Script loaded");chrome.runtime.onInstalled.addListener(async e=>{console.log("Extension installed:",e.reason),e.reason==="install"&&await k()});chrome.action.onClicked.addListener(async e=>{console.log("Background: Extension icon clicked, opening popup (Phantom-style)");try{const o=e.windowId;if(!o)throw new Error("No window ID available");console.log("Background: Opening popup window");try{await chrome.action.openPopup(),console.log("Background: Popup opened via chrome.action.openPopup()")}catch(t){console.log("Background: chrome.action.openPopup() failed, using tab fallback:",t),await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:o}),console.log("Background: Popup opened as new tab")}d.set(o,"popup")}catch(o){console.error("Background: Failed to handle icon click:",o);try{console.log("Background: Final fallback - opening popup tab"),await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:e.windowId})}catch(t){console.error("Background: All methods failed:",t)}}});chrome.contextMenus.onClicked.addListener(async(e,o)=>{if(e.menuItemId==="open-popup")try{await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:o?.windowId})}catch(t){console.error("Failed to open popup:",t)}});const d=new Map;chrome.runtime.onMessage.addListener((e,o,t)=>{if(console.log("Background: Received message:",e.type,"from sender:",o),e.type==="TOGGLE_SIDEPANEL")return m(o.tab?.windowId).then(()=>t({success:!0})).catch(n=>t({success:!1,error:n.message})),!0;if(e.type==="SWITCH_TO_SIDEPANEL")return y(e.windowId).then(()=>t({success:!0})).catch(n=>t({success:!1,error:n.message})),!0;if(e.type==="SWITCH_TO_POPUP")return T(e.windowId).then(()=>t({success:!0})).catch(n=>t({success:!1,error:n.message})),!0;if(e.type==="GET_WINDOW_MODE")return I(e.windowId).then(n=>t({success:!0,mode:n})).catch(n=>t({success:!1,error:n.message})),!0;if(e.type==="CLOSE_SIDEPANEL")return _(e.windowId).then(()=>t({success:!0})).catch(n=>t({success:!1,error:n.message})),!0;if(e.type==="REOPEN_WALLET")return S(e.windowId).then(()=>t({success:!0})).catch(n=>t({success:!1,error:n.message})),!0;if(e.type==="CLOSE_SIDEPANEL_PHANTOM_STYLE")return P(e.windowId).then(()=>t({success:!0})).catch(n=>t({success:!1,error:n.message})),!0});async function m(e){if(console.log("Background: handleToggleSidePanel called with windowId:",e),!chrome.sidePanel)throw new Error("Side Panel API not available");try{let o=e;if(o||(console.log("Background: No windowId provided, getting current window..."),o=(await chrome.windows.getCurrent()).id,console.log("Background: Using current window ID:",o)),!o)throw new Error("Unable to determine target window");console.log("Background: Opening side panel for window:",o),await chrome.sidePanel.open({windowId:o}),console.log("Background: Side panel opened successfully")}catch(o){throw console.error("Background: Failed to toggle side panel:",o),o}}async function y(e){if(console.log("Background: Switching to side panel mode for window:",e),!chrome.sidePanel)throw new Error("Side Panel API not available");try{let o=e;if(o||(o=(await chrome.windows.getCurrent()).id),!o)throw new Error("Unable to determine target window");d.set(o,"sidepanel"),await chrome.sidePanel.open({windowId:o}),console.log("Background: Successfully switched to side panel mode")}catch(o){throw console.error("Background: Failed to switch to side panel:",o),o}}async function T(e){console.log("Background: Switching to popup mode for window:",e);try{let o=e;if(o||(o=(await chrome.windows.getCurrent()).id),!o)throw new Error("Unable to determine target window");if(d.set(o,"popup"),chrome.sidePanel)try{console.log("Background: Side panel cannot be directly closed, opening popup instead")}catch(t){console.log("Background: Could not close side panel:",t)}await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:o}),console.log("Background: Successfully switched to popup mode")}catch(o){throw console.error("Background: Failed to switch to popup:",o),o}}async function I(e){try{let o=e;if(o||(o=(await chrome.windows.getCurrent()).id),!o)throw new Error("Unable to determine target window");const t=d.get(o)||"popup";return console.log("Background: Current window mode for",o,":",t),t}catch(o){throw console.error("Background: Failed to get window mode:",o),o}}async function _(e){console.log("Background: Closing side panel for window:",e);try{let o=e;if(o||(o=(await chrome.windows.getCurrent()).id),!o)throw new Error("Unable to determine target window");if(d.set(o,"popup"),chrome.sidePanel&&chrome.sidePanel.setOptions)try{await chrome.sidePanel.setOptions({enabled:!1}),console.log("Background: Side panel disabled")}catch(t){console.log("Background: Could not disable side panel:",t)}if(chrome.sidePanel&&chrome.sidePanel.setOptions)try{await chrome.sidePanel.setOptions({path:"about:blank"}),console.log("Background: Side panel path set to blank")}catch(t){console.log("Background: Could not set blank path:",t)}console.log("Background: Side panel close attempt completed")}catch(o){throw console.error("Background: Failed to close side panel:",o),o}}async function S(e){console.log("Background: Reopening wallet for window:",e);try{let o=e;if(o||(o=(await chrome.windows.getCurrent()).id),!o)throw new Error("Unable to determine target window");if(chrome.sidePanel)try{await chrome.sidePanel.setOptions({enabled:!0,path:"src/sidepanel/index.html"}),await chrome.sidePanel.open({windowId:o}),d.set(o,"sidepanel"),console.log("Background: Successfully reopened side panel")}catch(t){console.log("Background: Could not reopen side panel, opening popup instead:",t),await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:o}),d.set(o,"popup")}else await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html"),windowId:o}),d.set(o,"popup");console.log("Background: Wallet reopened successfully")}catch(o){throw console.error("Background: Failed to reopen wallet:",o),o}}async function P(e){console.log("Background: Closing side panel (Phantom-style) for window:",e);try{let o=e;if(o||(o=(await chrome.windows.getCurrent()).id),!o)throw new Error("Unable to determine target window");d.set(o,"closed"),console.log("Background: Side panel close signal sent (Phantom-style)"),console.log("Background: Window mode set to closed for window:",o)}catch(o){throw console.error("Background: Failed to close side panel (Phantom-style):",o),o}}async function k(){try{const e=f();await chrome.storage.local.set({[s.DEVICE_ID]:e,[s.WALLETS]:[],[s.SETTINGS]:{language:"en",currency:"USD",theme:"light",notifications:!0,autoLock:!0,lockTimeout:3e5}}),chrome.contextMenus.create({id:"open-popup",title:"Open Wallet Popup",contexts:["action"]}),console.log("Extension initialized with device ID:",e)}catch(e){console.error("Failed to initialize extension:",e)}}chrome.runtime.onMessage.addListener((e,o,t)=>[r.GET_WALLETS,r.GET_CURRENT_WALLET,r.SET_CURRENT_WALLET,r.CREATE_WALLET,r.IMPORT_WALLET,r.DELETE_WALLET,r.GET_BALANCE,r.TRANSFER,r.SWAP,r.GET_SETTINGS,r.UPDATE_SETTINGS,r.GET_SUPPORTED_CHAINS,r.REFRESH_TOKEN_PRICES].includes(e.type)?(console.log("Background received wallet message:",e.type,e.data),L(e).then(c=>{t({success:!0,data:c})}).catch(c=>{console.error("Wallet message handling error:",c),t({success:!1,error:c.message})}),!0):!1);async function L(e){switch(e.type){case r.GET_WALLETS:return await p();case r.GET_CURRENT_WALLET:return await A();case r.SET_CURRENT_WALLET:return await C(e.data);case r.CREATE_WALLET:return await W(e.data);case r.IMPORT_WALLET:return await B(e.data);case r.DELETE_WALLET:return await b(e.data.walletId);case r.GET_BALANCE:return await v(e.data.walletId);case r.TRANSFER:return await N(e.data);case r.SWAP:return await D(e.data);case r.GET_SETTINGS:return await O();case r.UPDATE_SETTINGS:return await R(e.data);case r.GET_SUPPORTED_CHAINS:return await U();case r.REFRESH_TOKEN_PRICES:return await G(e.data.walletId);default:return console.warn("Unexpected wallet message type:",e.type),null}}async function A(){return h(),(await g().get([s.CURRENT_WALLET]))[s.CURRENT_WALLET]||null}async function C(e){return h(),await g().set({[s.CURRENT_WALLET]:{walletId:e.walletId}}),console.log("Current wallet saved to storage:",e.walletId),{success:!0}}async function p(){h();const e=g(),t=(await e.get([s.DEVICE_ID,s.WALLETS]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");const c=await(await fetch(`${u.API_BASE_URL}/wallets/?device_id=${t}`)).json();if(c.state==="success")return await e.set({[s.WALLETS]:c.data||[]}),c.data||[];throw new Error(c.message||"Failed to get wallets")}async function W(e){const t=(await chrome.storage.local.get([s.DEVICE_ID]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");const c=await(await fetch(`${u.API_BASE_URL}/wallets/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({...e,device_id:t})})).json();if(c.state==="success")return await p(),c.data;throw new Error(c.message||"Failed to create wallet")}async function B(e){const t=(await chrome.storage.local.get([s.DEVICE_ID]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");let n="";if(e.private_key)n="import_private_key";else if(e.mnemonic)n="import_by_mnemonic";else if(e.address)n="import_watch_only";else throw new Error("Invalid import data");const c={...e,device_id:t},E=`${u.API_BASE_URL}/wallets/${n}/`;console.log("Import wallet request:",{endpoint:n,baseUrl:u.API_BASE_URL,apiUrl:E,body:c});const i=await fetch(E,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)}),a=await i.json();if(console.log("Import wallet response:",{status:i.status,statusText:i.statusText,data:a}),i.ok&&a.state==="success")return await p(),a.data;if(console.error("Import wallet failed:",a),console.error("Response status:",i.status),console.error("Response ok:",i.ok),console.error("Data state:",a.state),console.error("Error message:",a.message),console.error("Non field errors:",a.non_field_errors),console.error("Full error data:",JSON.stringify(a,null,2)),i.status===400){let w="";a.message?w=a.message:a.non_field_errors&&Array.isArray(a.non_field_errors)&&a.non_field_errors.length>0?w=a.non_field_errors[0]:a.error?w=a.error:typeof a=="string"&&(w=a);const l=w.toLowerCase();throw console.log("Checking error message:",w),console.log("Lowercase error message:",l),l.includes("password")?new Error("Incorrect password. Please check your payment password."):l.includes("private key")||l.includes("privatekey")?new Error("Invalid private key. Please check your private key format."):l.includes("mnemonic")||l.includes("recovery phrase")?new Error("Invalid recovery phrase. Please check your 12-word phrase."):l.includes("invalid")||l.includes("wrong")||l.includes("incorrect")?new Error("Invalid input. Please check your private key and password."):new Error(w||"Invalid request. Please check your input.")}else throw i.status===401?new Error("Authentication failed. Please try again."):i.status===500?new Error("Server error. Please try again later."):new Error(a.message||a.non_field_errors?.[0]||"Failed to import wallet")}async function b(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e}/delete_wallet/`,{method:"POST",headers:{"Content-Type":"application/json"}})).json();if(t.state==="success")return await p(),t.data;throw new Error(t.message||"Failed to delete wallet")}async function v(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e}/get_all_balances/`)).json();if(t.state==="success")return t;throw new Error(t.message||"Failed to get balance")}async function N(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e.walletId}/transfer/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();if(t.state==="success")return t.data;throw new Error(t.message||"Transfer failed")}async function D(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e.walletId}/swap/execute/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();if(t.state==="success")return t.data;throw new Error(t.message||"Swap failed")}async function O(){return(await chrome.storage.local.get([s.SETTINGS]))[s.SETTINGS]||{}}async function R(e){return await chrome.storage.local.set({[s.SETTINGS]:e}),e}async function U(){const o=await(await fetch(`${u.API_BASE_URL}/wallets/get_supported_chains/`)).json();if(o.state==="success")return o.data||[];throw new Error(o.message||"Failed to get supported chains")}async function G(e){const t=await(await fetch(`${u.API_BASE_URL}/wallets/${e}/get_token_prices/`,{method:"GET",headers:{"Content-Type":"application/json"}})).json();if(t.status==="success")return t;throw new Error(t.message||"Failed to refresh token prices")}chrome.alarms.create("refreshData",{periodInMinutes:5});chrome.alarms.onAlarm.addListener(async e=>{if(e.name==="refreshData")try{await p(),console.log("Data refreshed")}catch(o){console.error("Failed to refresh data:",o)}});

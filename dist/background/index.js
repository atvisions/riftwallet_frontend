import{d as g,S as s,M as r,a as w,b as E,A as u}from"../assets/chrome-mock-BbAbqiJG.js";console.log("Riftwallet Background Script loaded");chrome.runtime.onInstalled.addListener(async e=>{console.log("Extension installed:",e.reason),e.reason==="install"&&await T()});chrome.action.onClicked.addListener(async e=>{console.log("Background: Extension icon clicked, opening popup");try{try{await chrome.action.openPopup(),console.log("Background: Popup opened via chrome.action.openPopup()")}catch(a){console.log("Background: chrome.action.openPopup() failed, using tab fallback:",a),await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html")}),console.log("Background: Popup opened as new tab")}}catch(a){console.error("Background: Failed to handle icon click:",a)}});chrome.contextMenus.onClicked.addListener(async(e,a)=>{if(e.menuItemId==="open-popup")try{await chrome.tabs.create({url:chrome.runtime.getURL("src/popup/index.html")})}catch(t){console.error("Failed to open popup:",t)}});chrome.runtime.onMessage.addListener((e,a,t)=>(console.log("Background: Received message:",e.type,"from sender:",a),e.type==="TOGGLE_SIDEPANEL"?(f().then(()=>t({success:!0})).catch(c=>t({success:!1,error:c.message})),!0):!1));async function f(){if(console.log("Background: handleToggleSidePanel called"),!chrome.sidePanel)throw new Error("Side Panel API not available");try{await chrome.sidePanel.open({windowId:void 0}),console.log("Background: Side panel opened successfully")}catch(e){throw console.error("Background: Failed to toggle side panel:",e),e}}async function T(){try{const e=g();await chrome.storage.local.set({[s.DEVICE_ID]:e,[s.WALLETS]:[],[s.SETTINGS]:{language:"en",currency:"USD",theme:"light",notifications:!0,autoLock:!0,lockTimeout:3e5}}),chrome.contextMenus.create({id:"open-popup",title:"Open Wallet Popup",contexts:["action"]}),console.log("Extension initialized with device ID:",e)}catch(e){console.error("Failed to initialize extension:",e)}}chrome.runtime.onMessage.addListener((e,a,t)=>[r.GET_WALLETS,r.GET_CURRENT_WALLET,r.SET_CURRENT_WALLET,r.CREATE_WALLET,r.IMPORT_WALLET,r.DELETE_WALLET,r.GET_BALANCE,r.TRANSFER,r.SWAP,r.GET_SETTINGS,r.UPDATE_SETTINGS,r.GET_SUPPORTED_CHAINS,r.REFRESH_TOKEN_PRICES].includes(e.type)?(console.log("Background received wallet message:",e.type,e.data),_(e).then(n=>{t({success:!0,data:n})}).catch(n=>{console.error("Wallet message handling error:",n),t({success:!1,error:n.message})}),!0):!1);async function _(e){switch(e.type){case r.GET_WALLETS:return await p();case r.GET_CURRENT_WALLET:return await y();case r.SET_CURRENT_WALLET:return await S(e.data);case r.CREATE_WALLET:return await I(e.data);case r.IMPORT_WALLET:return await m(e.data);case r.DELETE_WALLET:return await L(e.data.walletId);case r.GET_BALANCE:return await A(e.data.walletId);case r.TRANSFER:return await P(e.data);case r.SWAP:return await R(e.data);case r.GET_SETTINGS:return await k();case r.UPDATE_SETTINGS:return await v(e.data);case r.GET_SUPPORTED_CHAINS:return await C();case r.REFRESH_TOKEN_PRICES:return await N(e.data.walletId);default:return console.warn("Unexpected wallet message type:",e.type),null}}async function y(){return w(),(await E().get([s.CURRENT_WALLET]))[s.CURRENT_WALLET]||null}async function S(e){return w(),await E().set({[s.CURRENT_WALLET]:{walletId:e.walletId}}),console.log("Current wallet saved to storage:",e.walletId),{success:!0}}async function p(){w();const e=E(),t=(await e.get([s.DEVICE_ID,s.WALLETS]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");const n=await(await fetch(`${u.API_BASE_URL}/wallets/?device_id=${t}`)).json();if(n.state==="success")return await e.set({[s.WALLETS]:n.data||[]}),n.data||[];throw new Error(n.message||"Failed to get wallets")}async function I(e){const t=(await chrome.storage.local.get([s.DEVICE_ID]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");const n=await(await fetch(`${u.API_BASE_URL}/wallets/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({...e,device_id:t})})).json();if(n.state==="success")return await p(),n.data;throw new Error(n.message||"Failed to create wallet")}async function m(e){const t=(await chrome.storage.local.get([s.DEVICE_ID]))[s.DEVICE_ID];if(!t)throw new Error("Device ID not found");let c="";if(e.private_key)c="import_private_key";else if(e.mnemonic)c="import_by_mnemonic";else if(e.address)c="import_watch_only";else throw new Error("Invalid import data");const n={...e,device_id:t},h=`${u.API_BASE_URL}/wallets/${c}/`;console.log("Import wallet request:",{endpoint:c,baseUrl:u.API_BASE_URL,apiUrl:h,body:n});const l=await fetch(h,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}),o=await l.json();if(console.log("Import wallet response:",{status:l.status,statusText:l.statusText,data:o}),l.ok&&o.state==="success")return await p(),o.data;if(console.error("Import wallet failed:",o),console.error("Response status:",l.status),console.error("Response ok:",l.ok),console.error("Data state:",o.state),console.error("Error message:",o.message),console.error("Non field errors:",o.non_field_errors),console.error("Full error data:",JSON.stringify(o,null,2)),l.status===400){let d="";o.message?d=o.message:o.non_field_errors&&Array.isArray(o.non_field_errors)&&o.non_field_errors.length>0?d=o.non_field_errors[0]:o.error?d=o.error:typeof o=="string"&&(d=o);const i=d.toLowerCase();throw console.log("Checking error message:",d),console.log("Lowercase error message:",i),i.includes("password")?new Error("Incorrect password. Please check your payment password."):i.includes("private key")||i.includes("privatekey")?new Error("Invalid private key. Please check your private key format."):i.includes("mnemonic")||i.includes("recovery phrase")?new Error("Invalid recovery phrase. Please check your 12-word phrase."):i.includes("invalid")||i.includes("wrong")||i.includes("incorrect")?new Error("Invalid input. Please check your private key and password."):new Error(d||"Invalid request. Please check your input.")}else throw l.status===401?new Error("Authentication failed. Please try again."):l.status===500?new Error("Server error. Please try again later."):new Error(o.message||o.non_field_errors?.[0]||"Failed to import wallet")}async function L(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e}/delete_wallet/`,{method:"POST",headers:{"Content-Type":"application/json"}})).json();if(t.state==="success")return await p(),t.data;throw new Error(t.message||"Failed to delete wallet")}async function A(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e}/get_all_balances/`)).json();if(t.state==="success")return t;throw new Error(t.message||"Failed to get balance")}async function P(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e.walletId}/transfer/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();if(t.state==="success")return t.data;throw new Error(t.message||"Transfer failed")}async function R(e){const t=await(await fetch(`http://192.168.3.56:8000/api/v1/wallets/${e.walletId}/swap/execute/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();if(t.state==="success")return t.data;throw new Error(t.message||"Swap failed")}async function k(){return(await chrome.storage.local.get([s.SETTINGS]))[s.SETTINGS]||{}}async function v(e){return await chrome.storage.local.set({[s.SETTINGS]:e}),e}async function C(){const a=await(await fetch(`${u.API_BASE_URL}/wallets/get_supported_chains/`)).json();if(a.state==="success")return a.data||[];throw new Error(a.message||"Failed to get supported chains")}async function N(e){const t=await(await fetch(`${u.API_BASE_URL}/wallets/${e}/get_token_prices/`,{method:"GET",headers:{"Content-Type":"application/json"}})).json();if(t.status==="success")return t;throw new Error(t.message||"Failed to refresh token prices")}
